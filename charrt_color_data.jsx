const getChartData = () => {
  const groupValues = filteredData.map((incident) => incident[groupBy]);
  const uniqueGroupValues = [...new Set(groupValues)];

  const groupCounts = uniqueGroupValues.map(
    (value) => groupValues.filter((item) => item === value).length
  );

  return {
    labels: uniqueGroupValues,
    datasets: [
      {
        label: "# of Incidents",
        data: groupCounts,
        backgroundColor: [
          "rgba(255, 99, 132, 0.8)",
          "rgba(54, 162, 235, 0.8)",
          "rgba(255, 206, 86, 0.8)",
          "rgba(75, 192, 192, 0.8)",
          "rgba(153, 102, 255, 0.8)",
          "rgba(255, 159, 64, 0.8)",
          "rgba(102, 204, 102, 0.8)",
          "rgba(255, 102, 178, 0.8)",
          "rgba(51, 153, 255, 0.8)",
          "rgba(255, 153, 51, 0.8)",
          "rgba(201, 203, 207, 0.8)",
          "rgba(255, 203, 255, 0.8)",
          "rgba(150, 150, 150, 0.8)",
          "rgba(100, 100, 255, 0.8)",
          "rgba(200, 200, 200, 0.8)",
          "rgba(75, 75, 75, 0.8)",
          "rgba(200, 150, 100, 0.8)",
          "rgba(100, 200, 150, 0.8)",
          "rgba(150, 100, 200, 0.8)",
          "rgba(255, 99, 71, 0.8)",
          "rgba(255, 159, 64, 0.8)",
          "rgba(75, 192, 192, 0.8)",
          "rgba(153, 102, 255, 0.8)",
          "rgba(54, 162, 235, 0.8)",
          "rgba(255, 206, 86, 0.8)",
          "rgba(255, 102, 178, 0.8)",
          "rgba(51, 153, 255, 0.8)",
          "rgba(102, 204, 102, 0.8)",
          "rgba(255, 153, 51, 0.8)",
          "rgba(201, 203, 207, 0.8)",
          "rgba(255, 203, 255, 0.8)",
          "rgba(150, 150, 150, 0.8)",
          "rgba(100, 100, 255, 0.8)",
          "rgba(200, 200, 200, 0.8)",
          "rgba(75, 75, 75, 0.8)",
          "rgba(200, 150, 100, 0.8)",
          "rgba(100, 200, 150, 0.8)",
          "rgba(150, 100, 200, 0.8)",
          "rgba(255, 99, 71, 0.8)",
          "rgba(255, 159, 64, 0.8)"
        ],
        borderColor: [
          "rgba(255, 99, 132, 1)",
          "rgba(54, 162, 235, 1)",
          "rgba(255, 206, 86, 1)",
          "rgba(75, 192, 192, 1)",
          "rgba(153, 102, 255, 1)",
          "rgba(255, 159, 64, 1)",
          "rgba(102, 204, 102, 1)",
          "rgba(255, 102, 178, 1)",
          "rgba(51, 153, 255, 1)",
          "rgba(255, 153, 51, 1)",
          "rgba(201, 203, 207, 1)",
          "rgba(255, 203, 255, 1)",
          "rgba(150, 150, 150, 1)",
          "rgba(100, 100, 255, 1)",
          "rgba(200, 200, 200, 1)",
          "rgba(75, 75, 75, 1)",
          "rgba(200, 150, 100, 1)",
          "rgba(100, 200, 150, 1)",
          "rgba(150, 100, 200, 1)",
          "rgba(255, 99, 71, 1)",
          "rgba(255, 159, 64, 1)",
          "rgba(75, 192, 192, 1)",
          "rgba(153, 102, 255, 1)",
          "rgba(54, 162, 235, 1)",
          "rgba(255, 206, 86, 1)",
          "rgba(255, 102, 178, 1)",
          "rgba(51, 153, 255, 1)",
          "rgba(102, 204, 102, 1)",
          "rgba(255, 153, 51, 1)",
          "rgba(201, 203, 207, 1)",
          "rgba(255, 203, 255, 1)",
          "rgba(150, 150, 150, 1)",
          "rgba(100, 100, 255, 1)",
          "rgba(200, 200, 200, 1)",
          "rgba(75, 75, 75, 1)",
          "rgba(200, 150, 100, 1)",
          "rgba(100, 200, 150, 1)",
          "rgba(150, 100, 200, 1)",
          "rgba(255, 99, 71, 1)",
          "rgba(255, 159, 64, 1)"
        ],
        borderWidth: 1,
      },
    ],
  };
};
